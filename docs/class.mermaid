---
config:
  theme: 'base'
  themeVariables:
    primaryColor: '#E8F4FD'
    primaryBorderColor: '#2196F3'
    primaryTextColor: '#1565C0'
    secondaryColor: '#F3E5F5'
    secondaryBorderColor: '#9C27B0'
    secondaryTextColor: '#6A1B9A'
    tertiaryColor: '#E8F5E8'
    tertiaryBorderColor: '#4CAF50'
    tertiaryTextColor: '#2E7D32'
    lineColor: '#424242'
    background: '#FAFAFA'
    textColor: '#212121'
    nodeTextColor: '#1565C0'
    edgeLabelBackground: '#FFFFFF'
    clusterBkg: '#F5F5F5'
    clusterBorder: '#BDBDBD'
    fillType0: '#E3F2FD'
    fillType1: '#F3E5F5'
    fillType2: '#E8F5E8'
    fillType3: '#FFF3E0'
    fillType4: '#FCE4EC'
    fillType5: '#F1F8E9'
    fillType6: '#E0F2F1'
    fillType7: '#FFF8E1'
---
classDiagram
    class HeartbeatMonitor {
        - timeout_threshold: int
        - last_heartbeat: Optional[datetime]
        - heartbeat_socket: socket
        - process_manager: ProcessManager
        - duration: int
        - start_time: Optional[float]
        + start_monitoring(cmd: List[str]): void
        + receive_heartbeat(): void
        + check_timeout(): bool
        + restart_process(): void
    }

    class ProcessManager {
        - worker_cmd: Optional[List[str]]
        - worker_process: Optional[subprocess.Popen]
        + start_process(cmd: List[str]): subprocess.Popen
        + restart_process(): subprocess.Popen
        + terminate_process(proc: subprocess.Popen): void
        + is_process_running(): bool
    }

    class ObstacleDetector {
        - heartbeat_interval: int
        - heartbeat_socket: socket
        - monitor_address: tuple
        - _running: bool
        + run_detection_loop(max_iterations: Optional[int]): void
        + send_heartbeat(): void
        + simulate_failure(): void
        + detect_obstacles(): void
        + stop(): void
    }

    HeartbeatMonitor ..> ProcessManager : uses
    ProcessManager --> ObstacleDetector : manages
    ObstacleDetector --> HeartbeatMonitor : sendHeartbeat
